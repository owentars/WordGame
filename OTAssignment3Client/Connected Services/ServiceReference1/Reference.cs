//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OTAssignment3Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IWordGame")]
    public interface IWordGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/isGameBeingHosted", ReplyAction="http://tempuri.org/IWordGame/isGameBeingHostedResponse")]
        bool isGameBeingHosted();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/isGameBeingHosted", ReplyAction="http://tempuri.org/IWordGame/isGameBeingHostedResponse")]
        System.Threading.Tasks.Task<bool> isGameBeingHostedAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/hostGame", ReplyAction="http://tempuri.org/IWordGame/hostGameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WordGame.GameBeingHostedException), Action="http://tempuri.org/IWordGame/hostGameGameBeingHostedExceptionFault", Name="GameBeingHostedException", Namespace="http://schemas.datacontract.org/2004/07/WordGame")]
        string hostGame(string userName, string wordToScramble);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/hostGame", ReplyAction="http://tempuri.org/IWordGame/hostGameResponse")]
        System.Threading.Tasks.Task<string> hostGameAsync(string userName, string wordToScramble);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/join", ReplyAction="http://tempuri.org/IWordGame/joinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WordGame.MaximunNumberOfPlayersReachedException), Action="http://tempuri.org/IWordGame/joinMaximunNumberOfPlayersReachedExceptionFault", Name="MaximunNumberOfPlayersReachedException", Namespace="http://schemas.datacontract.org/2004/07/WordGame")]
        [System.ServiceModel.FaultContractAttribute(typeof(WordGame.HostCannotJoinTheGameException), Action="http://tempuri.org/IWordGame/joinHostCannotJoinTheGameExceptionFault", Name="HostCannotJoinTheGameException", Namespace="http://schemas.datacontract.org/2004/07/WordGame")]
        [System.ServiceModel.FaultContractAttribute(typeof(WordGame.GameIsNotBeingHostedException), Action="http://tempuri.org/IWordGame/joinGameIsNotBeingHostedExceptionFault", Name="GameIsNotBeingHostedException", Namespace="http://schemas.datacontract.org/2004/07/WordGame")]
        WordGame.Word join(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/join", ReplyAction="http://tempuri.org/IWordGame/joinResponse")]
        System.Threading.Tasks.Task<WordGame.Word> joinAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/guessWord", ReplyAction="http://tempuri.org/IWordGame/guessWordResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(WordGame.PlayerNotPlayingTheGameException), Action="http://tempuri.org/IWordGame/guessWordPlayerNotPlayingTheGameExceptionFault", Name="PlayerNotPlayingTheGameException", Namespace="http://schemas.datacontract.org/2004/07/WordGame")]
        bool guessWord(string playerName, string guessedWord, string unscrambledWord);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWordGame/guessWord", ReplyAction="http://tempuri.org/IWordGame/guessWordResponse")]
        System.Threading.Tasks.Task<bool> guessWordAsync(string playerName, string guessedWord, string unscrambledWord);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWordGameChannel : OTAssignment3Client.ServiceReference1.IWordGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WordGameClient : System.ServiceModel.ClientBase<OTAssignment3Client.ServiceReference1.IWordGame>, OTAssignment3Client.ServiceReference1.IWordGame {
        
        public WordGameClient() {
        }
        
        public WordGameClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WordGameClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordGameClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WordGameClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool isGameBeingHosted() {
            return base.Channel.isGameBeingHosted();
        }
        
        public System.Threading.Tasks.Task<bool> isGameBeingHostedAsync() {
            return base.Channel.isGameBeingHostedAsync();
        }
        
        public string hostGame(string userName, string wordToScramble) {
            return base.Channel.hostGame(userName, wordToScramble);
        }
        
        public System.Threading.Tasks.Task<string> hostGameAsync(string userName, string wordToScramble) {
            return base.Channel.hostGameAsync(userName, wordToScramble);
        }
        
        public WordGame.Word join(string playerName) {
            return base.Channel.join(playerName);
        }
        
        public System.Threading.Tasks.Task<WordGame.Word> joinAsync(string playerName) {
            return base.Channel.joinAsync(playerName);
        }
        
        public bool guessWord(string playerName, string guessedWord, string unscrambledWord) {
            return base.Channel.guessWord(playerName, guessedWord, unscrambledWord);
        }
        
        public System.Threading.Tasks.Task<bool> guessWordAsync(string playerName, string guessedWord, string unscrambledWord) {
            return base.Channel.guessWordAsync(playerName, guessedWord, unscrambledWord);
        }
    }
}
